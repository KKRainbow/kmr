// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compute/pb/compute.proto

/*
Package kmrpb is a generated protocol buffer package.

It is generated from these files:
	compute/pb/compute.proto

It has these top-level messages:
	KV
	ConfigResponse
*/
package kmrpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KV struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KV) Reset()                    { *m = KV{} }
func (m *KV) String() string            { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()               {}
func (*KV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KV) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KV) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ConfigResponse struct {
	Retcode int32 `protobuf:"varint,1,opt,name=retcode" json:"retcode,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfigResponse) GetRetcode() int32 {
	if m != nil {
		return m.Retcode
	}
	return 0
}

func init() {
	proto.RegisterType((*KV)(nil), "kmrpb.KV")
	proto.RegisterType((*ConfigResponse)(nil), "kmrpb.ConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Compute service

type ComputeClient interface {
	ConfigMapper(ctx context.Context, opts ...grpc.CallOption) (Compute_ConfigMapperClient, error)
	Map(ctx context.Context, opts ...grpc.CallOption) (Compute_MapClient, error)
	ConfigReducer(ctx context.Context, opts ...grpc.CallOption) (Compute_ConfigReducerClient, error)
	Reduce(ctx context.Context, opts ...grpc.CallOption) (Compute_ReduceClient, error)
}

type computeClient struct {
	cc *grpc.ClientConn
}

func NewComputeClient(cc *grpc.ClientConn) ComputeClient {
	return &computeClient{cc}
}

func (c *computeClient) ConfigMapper(ctx context.Context, opts ...grpc.CallOption) (Compute_ConfigMapperClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Compute_serviceDesc.Streams[0], c.cc, "/kmrpb.Compute/ConfigMapper", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeConfigMapperClient{stream}
	return x, nil
}

type Compute_ConfigMapperClient interface {
	Send(*KV) error
	CloseAndRecv() (*ConfigResponse, error)
	grpc.ClientStream
}

type computeConfigMapperClient struct {
	grpc.ClientStream
}

func (x *computeConfigMapperClient) Send(m *KV) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computeConfigMapperClient) CloseAndRecv() (*ConfigResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *computeClient) Map(ctx context.Context, opts ...grpc.CallOption) (Compute_MapClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Compute_serviceDesc.Streams[1], c.cc, "/kmrpb.Compute/Map", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeMapClient{stream}
	return x, nil
}

type Compute_MapClient interface {
	Send(*KV) error
	Recv() (*KV, error)
	grpc.ClientStream
}

type computeMapClient struct {
	grpc.ClientStream
}

func (x *computeMapClient) Send(m *KV) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computeMapClient) Recv() (*KV, error) {
	m := new(KV)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *computeClient) ConfigReducer(ctx context.Context, opts ...grpc.CallOption) (Compute_ConfigReducerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Compute_serviceDesc.Streams[2], c.cc, "/kmrpb.Compute/ConfigReducer", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeConfigReducerClient{stream}
	return x, nil
}

type Compute_ConfigReducerClient interface {
	Send(*KV) error
	CloseAndRecv() (*ConfigResponse, error)
	grpc.ClientStream
}

type computeConfigReducerClient struct {
	grpc.ClientStream
}

func (x *computeConfigReducerClient) Send(m *KV) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computeConfigReducerClient) CloseAndRecv() (*ConfigResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *computeClient) Reduce(ctx context.Context, opts ...grpc.CallOption) (Compute_ReduceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Compute_serviceDesc.Streams[3], c.cc, "/kmrpb.Compute/Reduce", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeReduceClient{stream}
	return x, nil
}

type Compute_ReduceClient interface {
	Send(*KV) error
	Recv() (*KV, error)
	grpc.ClientStream
}

type computeReduceClient struct {
	grpc.ClientStream
}

func (x *computeReduceClient) Send(m *KV) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computeReduceClient) Recv() (*KV, error) {
	m := new(KV)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Compute service

type ComputeServer interface {
	ConfigMapper(Compute_ConfigMapperServer) error
	Map(Compute_MapServer) error
	ConfigReducer(Compute_ConfigReducerServer) error
	Reduce(Compute_ReduceServer) error
}

func RegisterComputeServer(s *grpc.Server, srv ComputeServer) {
	s.RegisterService(&_Compute_serviceDesc, srv)
}

func _Compute_ConfigMapper_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputeServer).ConfigMapper(&computeConfigMapperServer{stream})
}

type Compute_ConfigMapperServer interface {
	SendAndClose(*ConfigResponse) error
	Recv() (*KV, error)
	grpc.ServerStream
}

type computeConfigMapperServer struct {
	grpc.ServerStream
}

func (x *computeConfigMapperServer) SendAndClose(m *ConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computeConfigMapperServer) Recv() (*KV, error) {
	m := new(KV)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Compute_Map_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputeServer).Map(&computeMapServer{stream})
}

type Compute_MapServer interface {
	Send(*KV) error
	Recv() (*KV, error)
	grpc.ServerStream
}

type computeMapServer struct {
	grpc.ServerStream
}

func (x *computeMapServer) Send(m *KV) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computeMapServer) Recv() (*KV, error) {
	m := new(KV)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Compute_ConfigReducer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputeServer).ConfigReducer(&computeConfigReducerServer{stream})
}

type Compute_ConfigReducerServer interface {
	SendAndClose(*ConfigResponse) error
	Recv() (*KV, error)
	grpc.ServerStream
}

type computeConfigReducerServer struct {
	grpc.ServerStream
}

func (x *computeConfigReducerServer) SendAndClose(m *ConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computeConfigReducerServer) Recv() (*KV, error) {
	m := new(KV)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Compute_Reduce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputeServer).Reduce(&computeReduceServer{stream})
}

type Compute_ReduceServer interface {
	Send(*KV) error
	Recv() (*KV, error)
	grpc.ServerStream
}

type computeReduceServer struct {
	grpc.ServerStream
}

func (x *computeReduceServer) Send(m *KV) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computeReduceServer) Recv() (*KV, error) {
	m := new(KV)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Compute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kmrpb.Compute",
	HandlerType: (*ComputeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConfigMapper",
			Handler:       _Compute_ConfigMapper_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Map",
			Handler:       _Compute_Map_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConfigReducer",
			Handler:       _Compute_ConfigReducer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Reduce",
			Handler:       _Compute_Reduce_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "compute/pb/compute.proto",
}

func init() { proto.RegisterFile("compute/pb/compute.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0xce, 0xcf, 0x2d,
	0x28, 0x2d, 0x49, 0xd5, 0x2f, 0x48, 0xd2, 0x87, 0x32, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0x58, 0xb3, 0x73, 0x8b, 0x0a, 0x92, 0x94, 0x74, 0xb8, 0x98, 0xbc, 0xc3, 0x84, 0x04, 0xb8, 0x98,
	0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x40, 0x4c, 0x21, 0x11, 0x2e, 0xd6,
	0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0xb0, 0x18, 0x84, 0xa3, 0xa4, 0xc5, 0xc5, 0xe7, 0x9c,
	0x9f, 0x97, 0x96, 0x99, 0x1e, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc1, 0xc5,
	0x5e, 0x94, 0x5a, 0x92, 0x9c, 0x9f, 0x92, 0x0a, 0xd6, 0xcd, 0x1a, 0x04, 0xe3, 0x1a, 0xed, 0x67,
	0xe4, 0x62, 0x77, 0x86, 0x58, 0x29, 0x64, 0xc2, 0xc5, 0x03, 0xd1, 0xe7, 0x9b, 0x58, 0x50, 0x90,
	0x5a, 0x24, 0xc4, 0xa9, 0x07, 0xb6, 0x5d, 0xcf, 0x3b, 0x4c, 0x4a, 0x14, 0xca, 0x44, 0x35, 0x57,
	0x89, 0x41, 0x83, 0x51, 0x48, 0x91, 0x8b, 0xd9, 0x37, 0xb1, 0x00, 0x59, 0x31, 0x82, 0x09, 0x52,
	0x60, 0xc0, 0x28, 0x64, 0xca, 0xc5, 0x0b, 0xd3, 0x98, 0x52, 0x9a, 0x4c, 0xb4, 0xc9, 0x2a, 0x5c,
	0x6c, 0x10, 0x0d, 0xf8, 0x0c, 0x4f, 0x62, 0x03, 0x87, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x23, 0xa9, 0xb5, 0x8b, 0x45, 0x01, 0x00, 0x00,
}
